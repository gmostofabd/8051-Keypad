
  	U EQU 31        ;MEMORY LOCATION TO HOLD UPPER NIBBLE
  	L EQU 32 	;MEMORY LOCATION TO HOLD LOWER NIBBLE

	PORT 	EQU 	P2      ;DATA PORT TO CONNECT LCD
	RS 	EQU 	P0.2    ;RS PIN CONNECTION
  	EN 	EQU 	P0.3    ;EN PIN CONNECTION



KEYPORT EQU P3			;KEYPAD PORT CONNECTED HERE
COL1 EQU P3.0			;COLUMN 1
COL2 EQU P3.1			;COLUMN 2
COL3 EQU P3.2			;COLUMN 3
COL4 EQU P3.3			;COLUMN 4

KEYVAL EQU 30H			;TO STORE KEY NUMBER
PRESSED BIT 0H			;FLAG






	ORG 	00H
	ACALL 	INIT
	ACALL	KEY_INIT
;  	MOV 	A, #'T'     ;SEND "TENTUTS.COM 4BIT" 
; 	ACALL 	LCD_DATA     ;IN FIRST LINE OF LCD

ll:	ACALL	GET_KEY
	MOV 	A, #02H   ;SEND "TENTUTS.COM 4BIT"
	LCALL	LCD_CMD
  	MOV 	A, #KEYVAL     ;SEND "TENTUTS.COM 4BIT" 
  	ACALL 	LCD_DATA     ;IN FIRST LINE OF LCD
  	SJMP	ll

KEY_INIT:
	MOV KEYPORT,#0FH	;MAKE ROWS AS O/P AND COL AS I/P
	RET



GET_KEY:
	MOV KEYVAL,#0		;RESET THE NUMBER
	MOV KEYPORT,#7FH	;MAKE ROW1 LOW
	ACALL READ_COL		;READ COLUMNS
 
	JB PRESSED, DONE	;CHECK IF FLAG IS SET
 
	MOV KEYVAL,#4		;IF NOT THEN READ NEXT ROW
	MOV KEYPORT,#0BFH	;MAKE ROW2 LOW
	ACALL READ_COL		;READ COLUMNS
 
	JB PRESSED, DONE	;CHECK IF FLAG IS SET
 
	MOV KEYVAL,#8		;IF NOT THEN READ NEXT ROW
	MOV KEYPORT,#0DFH	;MAKE ROW3 LOW
	ACALL READ_COL		;READ COLUMNS
 
	JB PRESSED, DONE	;CHECK IF FLAG IS SET
 
	MOV KEYVAL,#12		;IF NOT READ ROW4
	MOV KEYPORT,#0EFH	;MAKE ROW4 LOW
	ACALL READ_COL		;READ COLUMNS
 
DONE:
	RET
 
READ_COL:			;READ COLUMNS ROUTINE
	CLR PRESSED		;RESET THE FLAG
 
	JB COL1, NEXTCOL	;CHECK IF FIRST KEY IS PRESSED
	JNB COL1,$		;IF YES THEN WAIT FOR KEY RELEASE	
	SETB PRESSED		;SET THE FLAG
	RET
 
NEXTCOL:			;READ COL2
	JB COL2, NEXTCOL1	;CHECK IF SECOND KEY IS PRESSED
	JNB COL2,$		;IF YES THEN WAIT FOR KEY RELEASE
	INC KEYVAL		;ITS KEY NUMBER 2
	SETB PRESSED		;SET THE FLAG
	RET
 
NEXTCOL1:			;READ COL3
	JB COL3, NEXTCOL2	;CHECK IF THIRD KEY IS PRESSED
	JNB COL3,$		;IF YES THEN WAIT FOR KEY RELEASE
	INC KEYVAL		;ITS KEY 3
	INC KEYVAL
	SETB PRESSED		;SET THE FLAG
	RET
 
NEXTCOL2:			;READ COLUMN 4
	JB COL4, EXIT		;CHECK IF FOURTH KEY PRESSED
	JNB COL4,$		;IF YES THEN WAIT FOR KEY RELEASE
	INC KEYVAL		;ITS KEY 4
	INC KEYVAL
	INC KEYVAL
	SETB PRESSED		;SET THE FLAG
	RET
 
EXIT:				;IF NO KEY IS PRESSED
	CLR PRESSED		;CLR THE FLAG
	CLR KEYVAL		;RESET THE NUMBER
	RET






ROW0:	MOV 	DPTR,#KCODE0
     	JMP 	LAST
ROW1:	MOV 	DPTR,#KCODE1
     	JMP 	LAST
ROW2:	MOV 	DPTR,#KCODE2
     	JMP 	LAST
ROW3:	MOV 	DPTR,#KCODE3
     	JMP 	LAST
LAST : RET
;*************************


;+++++++++++++++++++++++++INITILIZATION
;++++++++++++++++++++++++++++++++++++++

INIT:
   	ACALL 	DELAY     	;SOME DELAY TO LCD AFTER POWER ON
   	ACALL 	DELAY

   	MOV 	PORT, #20H  	;SEND 20H TO LCD TO SET 4 BIT MODE
   	CLR 	RS   		;AFTER THAT WE CAN USE LCD_CMD
   	SETB 	EN         	;MAKE EN SWITCHING
   	ACALL 	DELAY
   	CLR 	EN

   	MOV 	A, #28H
   	ACALL 	LCD_CMD
   	MOV 	A, #0CH
   	ACALL 	LCD_CMD
   	MOV 	A, #06H
   	ACALL 	LCD_CMD
   	MOV 	A, #01H
   	ACALL 	LCD_CMD
   	RET
;++++++++++++++++++++++++++++++++++++++



 
;++++++++++++++++++++++++++LCD COMMAND 
;++++++++++++++++++++++++++++++++++++++
   LCD_CMD:
    	CLR 	RS     		;CLEAR RS, GOING TO SEND COMMAND
    	ACALL 	SEPARATOR     	;SEPARATE THE COMMAND AND SAVE TO U AND L
    	MOV 	A, U     	;COPY U TO A
    	ACALL 	MOVE_TO_PORT  	;MOVE CONTENT OF A TO PORT 
    	MOV 	A, L            ;COPY L TO A
    	ACALL 	MOVE_TO_PORT  	;MOVE CONTENT OF A TO PORT
    	RET       		;RETURN
 
;++++++++++++++++++++++++++++++LCD DATA
;++++++++++++++++++++++++++++++++++++++
  LCD_DATA:
   	SETB 	RS            ;RS=1, GOING TO SEND DATA
   	ACALL 	SEPARATOR    ;SEPARATE THE DATA AND SAVE TO U & L
   	MOV 	A, U           ;COPY U TO A
   	ACALL 	MOVE_TO_PORT ;SEND IT TO LCD
   	MOV 	A, L           ;COPY L TO A
   	ACALL 	MOVE_TO_PORT ;SEND IT TO LCD
   	RET                ;RETURN

;+++++++++++++++++++++++++++++SEPARATOR
;++++++++++++++++++++++++++++++++++++++
SEPARATOR:
   	MOV 	U,A        ;SAVE A AT TEMP LOCATION U
   	ANL 	U,#0F0H    ;MASK IT  WITH 0FH (28H & F0H = 20H) 
   	SWAP 	A         ;SWAP NIBBLE (28H => 82H)
   	ANL 	A,#0F0H    ;MASK IT WITH 0FH (82H & F0H = 80H)
   	MOV 	L,A        ;SAVE IT AT TEMP LOCATION L
   	RET            ;RETURN

;++++++++++++++++++++++++++MOVE TO PORT 
;++++++++++++++++++++++++++++++++++++++

MOVE_TO_PORT:
   	MOV 	PORT,A       ;PUT CONTENT OF A TO PORT
   	SETB 	EN    	;MAKE EN HIGH
   	ACALL 	DELAY   ;CALL A SHORT DELAY ROUTINE
   	CLR 	EN     ;CLEAR EN
   	ACALL 	DELAY   ;SHORT DELAY
   	RET     	;RETURN
;+++++++++++++++++++++++++++++++++DELAY
;++++++++++++++++++++++++++++++++++++++
DELAY:
   	MOV 	R0, #10H
L2: 	MOV 	R1, #0FH
L1: 	DJNZ 	R1, L1
   	DJNZ 	R0, L2
   	RET

;+++++++++++++++++++++++++++++++++++++++


ORG 200H
KCODE0:DB 31H,32H,33H
KCODE1:DB 34H,35H,36H
KCODE2:DB 37H,38H,39H
KCODE3:DB 01H,30H,10H
      END